# -*- coding: utf-8 -*-
"""SmartSDLCProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lqiQi3gtE5X7tAUNACEc0MXVW9Bttuw8
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

#Load model
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


#Generic response generator
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


#SmartSDLC Functions
def explain_phase(phase):
    prompt = f"Explain the {phase} phase of the Software Development Lifecycle (SDLC) in detail. Include real-world examples."
    return generate_response(prompt, max_length=800)

def ai_checklist(phase):
    prompt = f"Generate a detailed checklist of how AI can enhance the {phase} phase in the SmartSDLC. Include tools, methods, and automation ideas."
    return generate_response(prompt, max_length=1200)

def smart_suggestions(phase):
    prompt = f"Suggest potential risks, improvements, and automation strategies for the {phase} phase in SmartSDLC."
    return generate_response(prompt, max_length=1000)


#Gradio UI
with gr.Blocks() as app:
    gr.Markdown("SmartSDLC - AI-Enhanced Software Development Lifecycle")

    with gr.Tabs():
        with gr.TabItem("Explain SDLC Phase"):
            phase_input = gr.Textbox(label="Enter an SDLC Phase", placeholder="e.g., Requirement Analysis")
            explain_btn = gr.Button("Explain")
            explain_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(explain_phase, inputs=phase_input, outputs=explain_output)

        with gr.TabItem("AI-Enhanced Checklist"):
            phase_input2 = gr.Textbox(label="Enter an SDLC Phase", placeholder="e.g., Testing")
            checklist_btn = gr.Button("Generate Checklist")
            checklist_output = gr.Textbox(label="AI Checklist", lines=15)
            checklist_btn.click(ai_checklist, inputs=phase_input2, outputs=checklist_output)

        with gr.TabItem("Smart Suggestions"):
            phase_input3 = gr.Textbox(label="Enter an SDLC Phase", placeholder="e.g., Deployment")
            suggestion_btn = gr.Button("Get Suggestions")
            suggestion_output = gr.Textbox(label="Smart Suggestions", lines=15)
            suggestion_btn.click(smart_suggestions, inputs=phase_input3, outputs=suggestion_output)

app.launch()

pip install gradio torch transformers